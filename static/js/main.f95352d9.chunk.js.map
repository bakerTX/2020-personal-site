{"version":3,"sources":["Astro3952_rectangle.jpg","Codepens.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Codepens","iframeStyles","width","height","margin","style","scrolling","title","src","frameBorder","allowtransparency","allowFullScreen","href","App","className","photo","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kHAAAA,EAAOC,QAAU,IAA0B,iD,8KCoD5BC,EAlDE,WACf,IAAMC,EAAe,CACnBC,MAAO,IACPC,OAAQ,IACRC,OAAQ,GAEV,OACE,oCACE,4BAAQD,OAAO,MAAME,MAAOJ,EAAcK,UAAU,KAAKC,MAAM,iBAAiBC,IAAI,sFAAsFC,YAAY,KAAKC,kBAAkB,OAAOC,gBAAgB,QAApO,cAEG,IACD,uBAAGC,KAAK,yCAAR,kBACC,IAJH,mBAOE,uBAAGA,KAAK,8BAAR,YAPF,OASE,uBAAGA,KAAK,sBAAR,WATF,KAaA,4BAAQT,OAAO,MAAME,MAAOJ,EAAcK,UAAU,KAAKC,MAAM,eAAeC,IAAI,uFAAuFC,YAAY,KAAKC,kBAAkB,OAAOC,gBAAgB,QAAnO,cAEG,IACD,uBAAGC,KAAK,0CAAR,gBACC,IAJH,mBAOE,uBAAGA,KAAK,8BAAR,YAPF,OASE,uBAAGA,KAAK,sBAAR,WATF,KAaA,4BAAQT,OAAO,MAAME,MAAOJ,EAAcK,UAAU,KAAKC,MAAM,uBAAuBC,IAAI,uFAAuFC,YAAY,KAAKC,kBAAkB,OAAOC,gBAAgB,QAA3O,cAEG,IACD,uBAAGC,KAAK,0CAAR,wBACC,IAJH,mBAOE,uBAAGA,KAAK,8BAAR,YAPF,OASE,uBAAGA,KAAK,sBAAR,WATF,OCOSC,MApCf,WACE,OACE,yBAAKC,UAAU,cACb,gCACE,wBAAIA,UAAU,aAAd,uEACA,0LAEA,gQAEA,8GAGF,yBAAKA,UAAU,6BACb,yBAAKN,IAAKO,IAAOC,IAAI,qCAAqCF,UAAU,eACpE,6CAEG,KACD,uBAAGF,KAAK,wCAAR,UAIJ,uCACA,kBAAC,EAAD,MAEA,0CACA,yGAEG,IACD,iCACE,uBAAGA,KAAK,mCAAR,gCCxBUK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f95352d9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Astro3952_rectangle.e9075e6a.jpg\";","import React from 'react';\n\nconst Codepens = () => {\n  const iframeStyles = {\n    width: 300,\n    height: 300,\n    margin: 5,\n  };\n  return (\n    <>\n      <iframe height=\"265\" style={iframeStyles} scrolling=\"no\" title=\"Monster Battle\" src=\"https://codepen.io/bakerTX/embed/KyJjEm?height=265&theme-id=dark&default-tab=result\" frameBorder=\"no\" allowtransparency=\"true\" allowFullScreen=\"true\">\n        See the Pen\n        {' '}\n        <a href=\"https://codepen.io/bakerTX/pen/KyJjEm\">Monster Battle</a>\n        {' '}\n        by Aaron Baker\n        (\n        <a href=\"https://codepen.io/bakerTX\">@bakerTX</a>\n        ) on\n        <a href=\"https://codepen.io\">CodePen</a>\n        .\n      </iframe>\n\n      <iframe height=\"265\" style={iframeStyles} scrolling=\"no\" title=\"Emoji picker\" src=\"https://codepen.io/bakerTX/embed/jOPVLob?height=265&theme-id=dark&default-tab=result\" frameBorder=\"no\" allowtransparency=\"true\" allowFullScreen=\"true\">\n        See the Pen\n        {' '}\n        <a href=\"https://codepen.io/bakerTX/pen/jOPVLob\">Emoji picker</a>\n        {' '}\n        by Aaron Baker\n        (\n        <a href=\"https://codepen.io/bakerTX\">@bakerTX</a>\n        ) on\n        <a href=\"https://codepen.io\">CodePen</a>\n        .\n      </iframe>\n\n      <iframe height=\"265\" style={iframeStyles} scrolling=\"no\" title=\"input shake on error\" src=\"https://codepen.io/bakerTX/embed/WNvOZwg?height=265&theme-id=dark&default-tab=result\" frameBorder=\"no\" allowtransparency=\"true\" allowFullScreen=\"true\">\n        See the Pen\n        {' '}\n        <a href=\"https://codepen.io/bakerTX/pen/WNvOZwg\">input shake on error</a>\n        {' '}\n        by Aaron Baker\n        (\n        <a href=\"https://codepen.io/bakerTX\">@bakerTX</a>\n        ) on\n        <a href=\"https://codepen.io\">CodePen</a>\n        .\n      </iframe>\n    </>\n  );\n};\n\nexport default Codepens;\n","import React from 'react';\n\nimport './home.css';\nimport photo from './Astro3952_rectangle.jpg';\n\nimport Codepens from './Codepens';\n\nfunction App() {\n  return (\n    <div className=\"everything\">\n      <header>\n        <h1 className=\"hero-text\">Hey, I&#39;m Aaron. I&#39;m a front end web engineer working in Austin, TX.</h1>\n        <p>I specialize in translating visual designs into responsive and performant web applications, using React. I&#39;m also quite passionate about web accessibility.</p>\n\n        <p>In my spare time, I like to learn new technologies. Recently, I&#39;ve been hacking on a Raspberry Pi, and exploring a variety of Linux distributions. I also like to cook, and I&#39;m currently training for a half marathon in Alaska.</p>\n\n        <p>As you&#39;ll eventually come to know, I&#39;m a huge fan of everything space related.</p>\n      </header>\n\n      <div className=\"util-column util-centered\">\n        <img src={photo} alt=\"artistic depiction of an astronaut\" className=\"hero-image\" />\n        <span>\n          Photo credit\n          {'  '}\n          <a href=\"https://heryzhuhaer.wixsite.com/hezu\">Hezu</a>\n        </span>\n      </div>\n\n      <h2>Codepen</h2>\n      <Codepens />\n\n      <h2>Contact me</h2>\n      <p>\n        Feel free to shoot me an email and I will get back to you as soon as I can.\n        {' '}\n        <address>\n          <a href=\"mailto:aaronbaker9210@gmail.com\">aaronbaker9210@gmail.com</a>\n        </address>\n      </p>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './util.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}